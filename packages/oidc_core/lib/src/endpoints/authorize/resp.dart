import 'package:json_annotation/json_annotation.dart';
import 'package:oidc_core/src/helpers/converters.dart';
import 'package:oidc_core/src/models/json_based_object.dart';

part 'resp.g.dart';

const _implicitWarning =
    'This parameter is only usable in the implicit flow, which is deprecated.';

/// Successful Authentication Response
@JsonSerializable(
  createFactory: true,
  createToJson: false,
  converters: commonConverters,
)
class OidcAuthorizeResponse extends JsonBasedResponse {
  ///
  const OidcAuthorizeResponse({
    required super.src,
    this.code,
    this.sessionState,
    this.state,
    this.iss,
    this.scope = const [],
    @Deprecated(_implicitWarning) this.tokenType,
    @Deprecated(_implicitWarning) this.expiresAt,
    @Deprecated(_implicitWarning) this.expiresIn,
    @Deprecated(_implicitWarning) this.accessToken,
    @Deprecated(_implicitWarning) this.idToken,
  });

  ///
  factory OidcAuthorizeResponse.fromJson(Map<String, dynamic> src) =>
      _$OidcAuthorizeResponseFromJson(src);

  @JsonKey(name: 'state')
  final String? state;

  @JsonKey(name: 'session_state')
  final String? sessionState;

  /// OPTIONAL.
  ///
  /// The identifier of the authorization server which the client can use to
  /// prevent mixup attacks, if the client interacts with more than one
  /// authorization server.
  ///
  ///  See [RFC9207](https://www.rfc-editor.org/rfc/rfc9207.html) for additional details on when this parameter is necessary, and how the client can use it to prevent mixup attacks.
  @JsonKey(name: 'iss')
  final Uri? iss;

  /// code
  static const kcode = 'code';

  /// REQUIRED, if the request_type was code.
  ///
  /// The authorization code generated by the authorization server.
  ///
  /// The authorization code MUST expire shortly after it is issued to
  /// mitigate the risk of leaks.
  ///
  /// A maximum authorization code lifetime of 10 minutes is RECOMMENDED.
  ///
  /// The client MUST NOT use the authorization code
  @JsonKey(name: kcode)
  final String? code;

  @JsonKey(name: 'scope', fromJson: splitSpaceDelimitedString)
  final List<String> scope;

  @Deprecated(_implicitWarning)
  @JsonKey(name: 'access_token')
  final String? accessToken;

  @Deprecated(_implicitWarning)
  @JsonKey(name: 'id_token')
  final String? idToken;

  @Deprecated(_implicitWarning)
  @JsonKey(name: 'token_type')
  final String? tokenType;

  @Deprecated(_implicitWarning)
  @JsonKey(name: 'expires_in')
  final Duration? expiresIn;

  @Deprecated(_implicitWarning)
  @JsonKey(name: 'expires_at', readValue: readDateTime)
  final DateTime? expiresAt;
}
